table(herd_dynamics$herdynamics)
herd_dynamics <- dataset %>%
select(household_id, village, interview_date,herdynamics) %>%
separate(herdynamics, c("dynamics1", "dynamics2", "dynamics3", "dynamics4", "dynamics5"), sep=" ")%>%
mutate_at(vars(contains("dynamics")), funs(recode(., "1"="Births", "2"="Deaths", "3"="Gifts",
"4"="Given out", "5"="Purchased", "6"="Sold", "7"="None")))
head(herd_dynamics)
herd_dynamics <- dataset %>%
select(household_id, village, interview_date,herdynamics) %>%
separate(herdynamics, c("dynamics1", "dynamics2", "dynamics3", "dynamics4", "dynamics5"), sep=" ")%>%
mutate_at(vars(contains("dynamics")), funs(recode(., "1"="Births", "2"="Deaths", "3"="Gifts",
"4"="Given out", "5"="Purchased", "6"="Sold", "7"="None")))%>%
pivot_longer(contains("dynamics"), names_to = "dyn", values_to = "dynamics")
pivot_longer(contains("dynamics"), names_to = "dyn", values_to = "dynamics")%>%
ggplot(herd_dynamics, aes(x=interview_date, fill=dynamics))+geom_bar()+facet_grid(.~study_arm)
herd_dynamics <- dataset %>%
herd_dynamics <- dataset %>%
select(household_id, village, interview_date,herdynamics) %>%
separate(herdynamics, c("dynamics1", "dynamics2", "dynamics3", "dynamics4", "dynamics5"), sep=" ")%>%
mutate_at(vars(contains("dynamics")), funs(recode(., "1"="Births", "2"="Deaths", "3"="Gifts",
"4"="Given out", "5"="Purchased", "6"="Sold", "7"="None")))%>%
pivot_longer(contains("dynamics"), names_to = "dyn", values_to = "dynamics")%>%
mutate(study_arm=mutate(study_arm=ifelse(village%in%c("Lependera","Gobb Arbelle", "Nahgan-ngusa","Sulate", "Saale-Sambakah", "Namarei", "Manyatta Lengima","Lokoshula", "TubchaDakhane", "Rengumo-Gargule"),
"Study arm 1", ifelse(village%in%c("Galthelian-Torrder", "Uyam  village", "Galthelan Elemo", "Nebey", "Rongumo_kurkum", "Urawen_Kurkum", "Eisimatacho", "Manyatta K.A.G", "Ltepes Ooodo",
"Lorokushu", "Marti", "Manyatta Juu West/East", "Lbaarok1"), "Study arm 2","Study arm 3"))))
ggplot(herd_dynamics, aes(x=interview_date, fill=dynamics))+geom_bar()+facet_grid(.~study_arm)
ggplot(herd_dynamics, aes(x=interview_date, fill=dynamics))+geom_bar()#+facet_grid(.~study_arm)
herd_dynamics <- dataset %>%
select(household_id, village, interview_date,herdynamics) %>%
separate(herdynamics, c("dynamics1", "dynamics2", "dynamics3", "dynamics4", "dynamics5"), sep=" ")%>%
mutate_at(vars(contains("dynamics")), funs(recode(., "1"="Births", "2"="Deaths", "3"="Gifts",
"4"="Given out", "5"="Purchased", "6"="Sold", "7"="None")))%>%
pivot_longer(contains("dynamics"), names_to = "dyn", values_to = "dynamics")%>%
mutate(study_arm=mutate(study_arm=ifelse(village%in%c("Lependera","Gobb Arbelle", "Nahgan-ngusa","Sulate", "Saale-Sambakah", "Namarei", "Manyatta Lengima","Lokoshula", "TubchaDakhane", "Rengumo-Gargule"),
"Study arm 1", ifelse(village%in%c("Galthelian-Torrder", "Uyam  village", "Galthelan Elemo", "Nebey", "Rongumo_kurkum", "Urawen_Kurkum", "Eisimatacho", "Manyatta K.A.G", "Ltepes Ooodo",
"Lorokushu", "Marti", "Manyatta Juu West/East", "Lbaarok1"), "Study arm 2","Study arm 3"))))%>%
mutate(study_arm=ifelse(study_arm%in%c("---", "None"), NA, study_arm))
ggplot(herd_dynamics, aes(x=interview_date, fill=dynamics))+geom_bar()#+facet_grid(.~study_arm)
herd_dynamics <- dataset %>%
select(household_id, village, interview_date,herdynamics) %>%
separate(herdynamics, c("dynamics1", "dynamics2", "dynamics3", "dynamics4", "dynamics5"), sep=" ")%>%
mutate_at(vars(contains("dynamics")), funs(recode(., "1"="Births", "2"="Deaths", "3"="Gifts",
"4"="Given out", "5"="Purchased", "6"="Sold", "7"="None")))%>%
pivot_longer(contains("dynamics"), names_to = "dyn", values_to = "dynamics")%>%
mutate(study_arm=mutate(study_arm=ifelse(village%in%c("Lependera","Gobb Arbelle", "Nahgan-ngusa","Sulate", "Saale-Sambakah", "Namarei", "Manyatta Lengima","Lokoshula", "TubchaDakhane", "Rengumo-Gargule"),
"Study arm 1", ifelse(village%in%c("Galthelian-Torrder", "Uyam  village", "Galthelan Elemo", "Nebey", "Rongumo_kurkum", "Urawen_Kurkum", "Eisimatacho", "Manyatta K.A.G", "Ltepes Ooodo",
"Lorokushu", "Marti", "Manyatta Juu West/East", "Lbaarok1"), "Study arm 2","Study arm 3"))))%>%
mutate(study_arm=ifelse(study_arm%in%c("---", "None"), NA, study_arm))
herd_dynamics <- dataset %>%
select(household_id, village, interview_date,herdynamics) %>%
separate(herdynamics, c("dynamics1", "dynamics2", "dynamics3", "dynamics4", "dynamics5"), sep=" ")%>%
mutate_at(vars(contains("dynamics")), funs(recode(., "1"="Births", "2"="Deaths", "3"="Gifts",
"4"="Given out", "5"="Purchased", "6"="Sold", "7"="None")))%>%
pivot_longer(contains("dynamics"), names_to = "dyn", values_to = "dynamics")%>%
mutate(study_arm=ifelse(village%in%c("Lependera","Gobb Arbelle", "Nahgan-ngusa","Sulate", "Saale-Sambakah", "Namarei", "Manyatta Lengima","Lokoshula", "TubchaDakhane", "Rengumo-Gargule"),
"Study arm 1", ifelse(village%in%c("Galthelian-Torrder", "Uyam  village", "Galthelan Elemo", "Nebey", "Rongumo_kurkum", "Urawen_Kurkum", "Eisimatacho", "Manyatta K.A.G", "Ltepes Ooodo",
"Lorokushu", "Marti", "Manyatta Juu West/East", "Lbaarok1"), "Study arm 2","Study arm 3")))%>%
mutate(study_arm=ifelse(study_arm%in%c("---", "None"), NA, study_arm))
ggplot(herd_dynamics, aes(x=interview_date, fill=dynamics))+geom_bar()#+facet_grid(.~study_arm)
herd_dynamics <- dataset %>%
select(household_id, village, interview_date,herdynamics) %>%
separate(herdynamics, c("dynamics1", "dynamics2", "dynamics3", "dynamics4", "dynamics5"), sep=" ")%>%
mutate_at(vars(contains("dynamics")), funs(recode(., "1"="Births", "2"="Deaths", "3"="Gifts",
"4"="Given out", "5"="Purchased", "6"="Sold", "7"="None")))%>%
pivot_longer(contains("dynamics"), names_to = "dyn", values_to = "dynamics")%>%
mutate(study_arm=ifelse(village%in%c("Lependera","Gobb Arbelle", "Nahgan-ngusa","Sulate", "Saale-Sambakah", "Namarei", "Manyatta Lengima","Lokoshula", "TubchaDakhane", "Rengumo-Gargule"),
"Study arm 1", ifelse(village%in%c("Galthelian-Torrder", "Uyam  village", "Galthelan Elemo", "Nebey", "Rongumo_kurkum", "Urawen_Kurkum", "Eisimatacho", "Manyatta K.A.G", "Ltepes Ooodo",
"Lorokushu", "Marti", "Manyatta Juu West/East", "Lbaarok1"), "Study arm 2","Study arm 3")))%>%
mutate(dynamics=ifelse(dynamics%in%c("---", "None"), NA, dynamics))
ggplot(herd_dynamics, aes(x=interview_date, fill=dynamics))+geom_bar()#+facet_grid(.~study_arm)
ggplot(herd_dynamics, aes(x=interview_date, fill=dynamics))+geom_bar()+facet_grid(.~study_arm)
ggplot(herd_dynamics, aes(x=interview_date, fill=dynamics))+geom_bar()+facet_grid(.~study_arm)+
theme_bw()
ggplot(herd_dynamics[!is.na(herd_dynamics$dynamics),], aes(x=interview_date, fill=dynamics))+geom_bar()+facet_grid(.~study_arm)+
theme_bw()
read_csv("https://raw.githubusercontent.com/cema-uonbi/L4H_sample_data/main/ideal3a.csv ")
read_csv("https://raw.githubusercontent.com/cema-uonbi/L4H_sample_data/main/ideal3a.csv")
read_csv("https://raw.githubusercontent.com/cema-uonbi/L4H_sample_data/main/ideal3a.csv")
read_csv("https://raw.githubusercontent.com/cema-uonbi/L4H_sample_data/main/ideal3a.csv")
read_csv("https://raw.githubusercontent.com/cema-uonbi/L4H_sample_data/main/ideal3a.csv")https://raw.githubusercontent.com/cema-uonbi/L4H_sample_data/main/ideal3a.csv
read_csv("https://raw.githubusercontent.com/cema-uonbi/L4H_sample_data/main/ideal3a.csv")https://raw.githubusercontent.com/cema-uonbi/L4H_sample_data/main/ideal3a.csv
read_csv("https://raw.githubusercontent.com/cema-uonbi/L4H_sample_data/main/ideal3a.csv")
children.mean.women.age <- read_csv("Table6.4children.mean.women.age.csv")
children.mean.women.age <- read_csv("data/table_6/Table6.4children.mean.women.age.csv")
library(tidyverse)
setwd("~/Dropbox/GitHub/2022_KDHS")
children.mean.women.age <- read_csv("data/table_6/Table6.4children.mean.women.age.csv")
children_mean <- read_csv("data/table_6/Table 6.4  Mean ideal number of children according to background characteristics.csv")
head(children_mean)
table(children_mean$characteristic)
children_mean <- read_csv("data/table_6/Table 6.4  Mean ideal number of children according to background characteristics.csv") %>%
mutate(characteristic=str_to_sentence(characteristic))
head(children_mean)
table(children_mean$characteristic)
ggplot(children_mean[children_mean$characteristic%in%"Age",],aes(x=Variable, y=mean))+
geom_bar(position="dodge", stat="identity", fill="cyan3")+
theme_bw()+coord_flip()+
labs( y="Percent (%)", title="", x="", fill="")+
theme(text=element_text(size=18, face="bold"))
fertility_planning <- read_csv("data/table_6/Table 6.5 Fertility planning status.csv")
head(fertility_planning)
table(fertility_planning$characteristic)
table(fertility_planning$`Fertility plan`)
fertility_planning <- read_csv("data/table_6/Table 6.5 Fertility planning status.csv") %>%
mutate(`Fertility plan`=recode(`Fertility plan`, "Wanted.later"="Wanted later", "Wanted.no.more"="Wanted no more", "Wanted.then"="Wanted then"))
head(fertility_planning)
ggplot(fertility_planning[fertility_planning$characteristic%in%"Wanted then",],aes(x=Variable, y=percent))+
geom_bar(position="dodge", stat="identity", fill="cyan3")+
theme_bw()+coord_flip()+coord_flip(~`Fertility plan`)+
labs( y="Percent (%)", title="", x="", fill="")+
theme(text=element_text(size=18, face="bold"))
ggplot(fertility_planning[fertility_planning$characteristic%in%"Wanted then",],aes(x=Variable, y=percent))+
geom_bar(position="dodge", stat="identity", fill="cyan3")+
theme_bw()+coord_flip()+coord_flip(~`Fertility plan`)+
labs( y="Percent (%)", title="", x="", fill="")+
theme(text=element_text(size=18, face="bold"))
fertility_rates <- read_csv("data/table_6/Table 6.6  Wanted fertility rates")
fertility_rates <- read_csv("data/table_6/Table 6.6  Wanted fertility rates") %>%
mutate(`Fertility plan`=recode(`Fertility plan`, "Wanted.later"="Wanted later", "Wanted.no.more"="Wanted no more", "Wanted.then"="Wanted then"))
fertility_rates <- read_csv("data/table_6/Table 6.6  Wanted fertility rates.csv")
head(fertility_rates)
fertility_rates <- read_csv("data/table_6/Table 6.6  Wanted fertility rates.csv") %>%
mutate(characteristic=str_to_sentence(characteristic))
table(fertility_rates$characteristic)
fertility_rates <- read_csv("data/table_6/Table 6.6  Wanted fertility rates.csv") %>%
mutate(characteristic=str_to_sentence(characteristic))
# function to calculate immunization rate
# immunization_rate <- function(type, times, vaccination_coverage, period_waves){
#
#   if(type==1)
#   immunization_rate <- ifelse(times/365-floor(times/365)<0.272 & vaccination_coverage>=0.025,1/period_waves*vaccination_coverage,0.025/365)
#   else if(type==2)
#     immunization_rate <-  ifelse(times/365-floor(times/365)<0.272 &
#                                   vaccination_coverage>=0.025,
#                                 1/365*vaccination_coverage,0.025/365)
#   else if(type==3)
#     immunization_rate1 =  ifelse(times/365-floor(times/365)<0.272 &
#                                   vaccination_coverage>=0.025,
#                                 1/365*vaccination_coverage,0.025/365)
#     immunization_rate2 =  ifelse(times/365-floor(times/365)<0.272 &
#                                   vaccination_coverage>=0.025,
#                                 1/period_waves*vaccination_coverage,0.025/365)
#     immunization <- data.frame(immunization_rate1, immunization_rate2)
#     immunization$immunization_rate = immunization$immunization_rate1 + immunization$immunization_rate2
#     immunization_ratee <- immunization$immunization_rate
#
#   return(list(immunization_ratee))}
seiv <- function(times,y,parms){
with(c(as.list(y),parms),{
N <- S + E + I + V
if(type==1){
immunization_rate <- ifelse(times/365-floor(times/365)<0.272 & vaccination_coverage>=0.02,1/period_waves*vaccination_coverage,0.025/365)}
else if(type==2){
immunization_rate <-  ifelse(times/365-floor(times/365)<round(period_waves/365,3) &
vaccination_coverage>=0.12,
1/365*vaccination_coverage,0.025/365)}
else if(type==3){
immunization_rate1 =  ifelse(times/365-floor(times/365)<round(period_waves/365,3) &
vaccination_coverage>=0.02,
1/365*vaccination_coverage,0.025/365)
immunization_rate2 =  ifelse(times/365-floor(times/365)<round(period_waves/365,3) &
vaccination_coverage>=0.02,
1/period_waves*vaccination_coverage,0.025/(365))
immunization <- data.frame(immunization_rate1, immunization_rate2)
immunization$immunization_rate = immunization$immunization_rate1 + immunization$immunization_rate2
immunization_rate <- immunization$immunization_rate}
densityDep=TRUE # indicated that transmission is density-dependent
lambda <-  ifelse(densityDep,beta*I/N0,beta*I/N)
carrying_capacity=9000000 # carrying capacity
dS <- birth_rate*(S+V) - natural_mortality* (1+N/carrying_capacity) * S - immunization_rate * S - lambda * S + loss_immunity * V  # We assume that mortality increases with increasing population size
dE <- lambda * S - natural_mortality* (1+N/carrying_capacity) * E  - progression_rate * E
dI <- importation_rate + progression_rate * E - natural_mortality* (1+N/carrying_capacity) * I - rabies_mortality * I
dV <- immunization_rate * S - natural_mortality* (1+N/carrying_capacity) * V - loss_immunity * V
return(list(c(dS, dE, dI, dV)))
})
}
time <- 0  # Start time
N0 <- 8063804 # Start population
popInit <- c(S = 7055804,
E = 5000,
I = 3000,
V = 1000000)     #Initial conditions estimated from the data
values <- c(beta = 0.4,
progression_rate = 1 / 22,
rabies_mortality = 1/ 3.1,
birth_rate = 0.003,
natural_mortality = 1/(1.85*365), # per capita backgroud mortality rate
importation_rate = 0, # total importation rate (infectious dogs)
vaccination_coverage = 0.70, # vac coverage at the end of 100 days campaign
efficacy = 1, # vaccine efficacy (proportion)
carrying_capacity=300000, # carrying capacity
loss_immunity=1/(3*365),
type=1, #1=annual waves, 2=annual coverage, 3=combined
period_waves=100
) # loss of immunity from vaccination over time
times <- seq(0,(365*20),1)  # the model will run for a total of 20 years
ts.seiv <- data.frame(lsoda(
y = popInit,               # Initial conditions for population
times = times,             # Timepoints for evaluation
func = seiv,                   # Function to evaluate
parms = values                # Vector of parameters
))
ts.seiv <- data.frame(lsoda(
y = popInit,               # Initial conditions for population
times = times,             # Timepoints for evaluation
func = seiv,                   # Function to evaluate
parms = values                # Vector of parameters
))
# function to calculate immunization rate
# immunization_rate <- function(type, times, vaccination_coverage, period_waves){
#
#   if(type==1)
#   immunization_rate <- ifelse(times/365-floor(times/365)<0.272 & vaccination_coverage>=0.025,1/period_waves*vaccination_coverage,0.025/365)
#   else if(type==2)
#     immunization_rate <-  ifelse(times/365-floor(times/365)<0.272 &
#                                   vaccination_coverage>=0.025,
#                                 1/365*vaccination_coverage,0.025/365)
#   else if(type==3)
#     immunization_rate1 =  ifelse(times/365-floor(times/365)<0.272 &
#                                   vaccination_coverage>=0.025,
#                                 1/365*vaccination_coverage,0.025/365)
#     immunization_rate2 =  ifelse(times/365-floor(times/365)<0.272 &
#                                   vaccination_coverage>=0.025,
#                                 1/period_waves*vaccination_coverage,0.025/365)
#     immunization <- data.frame(immunization_rate1, immunization_rate2)
#     immunization$immunization_rate = immunization$immunization_rate1 + immunization$immunization_rate2
#     immunization_ratee <- immunization$immunization_rate
#
#   return(list(immunization_ratee))}
seiv <- function(times,y,parms){
with(c(as.list(y),parms),{
N <- S + E + I + V
if(type==1){
immunization_rate <- ifelse(times/365-floor(times/365)<0.272 & vaccination_coverage>=0.02,1/period_waves*vaccination_coverage,0.025/365)}
else if(type==2){
immunization_rate <-  ifelse(times/365-floor(times/365)<round(period_waves/365,3) &
vaccination_coverage>=0.12,
1/365*vaccination_coverage,0.025/365)}
else if(type==3){
immunization_rate1 =  ifelse(times/365-floor(times/365)<round(period_waves/365,3) &
vaccination_coverage>=0.02,
1/365*vaccination_coverage,0.025/365)
immunization_rate2 =  ifelse(times/365-floor(times/365)<round(period_waves/365,3) &
vaccination_coverage>=0.02,
1/period_waves*vaccination_coverage,0.025/(365))
immunization <- data.frame(immunization_rate1, immunization_rate2)
immunization$immunization_rate = immunization$immunization_rate1 + immunization$immunization_rate2
immunization_rate <- immunization$immunization_rate}
densityDep=TRUE # indicated that transmission is density-dependent
lambda <-  ifelse(densityDep,beta*I/N0,beta*I/N)
carrying_capacity=9000000 # carrying capacity
dS <- birth_rate*(S+V) - natural_mortality* (1+N/carrying_capacity) * S - immunization_rate * S - lambda * S + loss_immunity * V  # We assume that mortality increases with increasing population size
dE <- lambda * S - natural_mortality* (1+N/carrying_capacity) * E  - progression_rate * E
dI <- importation_rate + progression_rate * E - natural_mortality* (1+N/carrying_capacity) * I - rabies_mortality * I
dV <- immunization_rate * S - natural_mortality* (1+N/carrying_capacity) * V - loss_immunity * V
return(list(c(dS, dE, dI, dV)))
})
}
time <- 0  # Start time
N0 <- 8063804 # Start population
popInit <- c(S = 7055804,
E = 5000,
I = 3000,
V = 1000000)     #Initial conditions estimated from the data
values <- c(beta = 0.4,
progression_rate = 1 / 22,
rabies_mortality = 1/ 3.1,
birth_rate = 0.003,
natural_mortality = 1/(1.85*365), # per capita backgroud mortality rate
importation_rate = 0, # total importation rate (infectious dogs)
vaccination_coverage = 0.70, # vac coverage at the end of 100 days campaign
efficacy = 1, # vaccine efficacy (proportion)
carrying_capacity=300000, # carrying capacity
loss_immunity=1/(3*365),
type=1, #1=annual waves, 2=annual coverage, 3=combined
period_waves=100
) # loss of immunity from vaccination over time
times <- seq(0,(365*20),1)  # the model will run for a total of 20 years
ts.seiv <- data.frame(lsoda(
y = popInit,               # Initial conditions for population
times = times,             # Timepoints for evaluation
func = seiv,                   # Function to evaluate
parms = values                # Vector of parameters
))
ggplot(ts.seiv1, aes(x=calyear, y=Ntot))+ geom_line( color="blue")+theme_bw()+geom_vline(xintercept = 2030, linetype=2)+labs(x="Year",y="Dog population")
# function to calculate immunization rate
# immunization_rate <- function(type, times, vaccination_coverage, period_waves){
#
#   if(type==1)
#   immunization_rate <- ifelse(times/365-floor(times/365)<0.272 & vaccination_coverage>=0.025,1/period_waves*vaccination_coverage,0.025/365)
#   else if(type==2)
#     immunization_rate <-  ifelse(times/365-floor(times/365)<0.272 &
#                                   vaccination_coverage>=0.025,
#                                 1/365*vaccination_coverage,0.025/365)
#   else if(type==3)
#     immunization_rate1 =  ifelse(times/365-floor(times/365)<0.272 &
#                                   vaccination_coverage>=0.025,
#                                 1/365*vaccination_coverage,0.025/365)
#     immunization_rate2 =  ifelse(times/365-floor(times/365)<0.272 &
#                                   vaccination_coverage>=0.025,
#                                 1/period_waves*vaccination_coverage,0.025/365)
#     immunization <- data.frame(immunization_rate1, immunization_rate2)
#     immunization$immunization_rate = immunization$immunization_rate1 + immunization$immunization_rate2
#     immunization_ratee <- immunization$immunization_rate
#
#   return(list(immunization_ratee))}
seiv <- function(times,y,parms){
with(c(as.list(y),parms),{
N <- S + E + I + V
if(type==1){
immunization_rate <- ifelse(times/365-floor(times/365)<0.272 & vaccination_coverage>=0.02,1/period_waves*vaccination_coverage,0.025/365)}
else if(type==2){
immunization_rate <-  ifelse(times/365-floor(times/365)<round(period_waves/365,3) &
vaccination_coverage>=0.12,
1/365*vaccination_coverage,0.025/365)}
else if(type==3){
immunization_rate1 =  ifelse(times/365-floor(times/365)<round(period_waves/365,3) &
vaccination_coverage>=0.02,
1/365*vaccination_coverage,0.025/365)
immunization_rate2 =  ifelse(times/365-floor(times/365)<round(period_waves/365,3) &
vaccination_coverage>=0.02,
1/period_waves*vaccination_coverage,0.025/(365))
immunization <- data.frame(immunization_rate1, immunization_rate2)
immunization$immunization_rate = immunization$immunization_rate1 + immunization$immunization_rate2
immunization_rate <- immunization$immunization_rate}
densityDep=TRUE # indicated that transmission is density-dependent
lambda <-  ifelse(densityDep,beta*I/N0,beta*I/N)
carrying_capacity=9000000 # carrying capacity
dS <- birth_rate*(S+V) - natural_mortality* (1+N/carrying_capacity) * S - immunization_rate * S - lambda * S + loss_immunity * V  # We assume that mortality increases with increasing population size
dE <- lambda * S - natural_mortality* (1+N/carrying_capacity) * E  - progression_rate * E
dI <- importation_rate + progression_rate * E - natural_mortality* (1+N/carrying_capacity) * I - rabies_mortality * I
dV <- immunization_rate * S - natural_mortality* (1+N/carrying_capacity) * V - loss_immunity * V
return(list(c(dS, dE, dI, dV)))
})
}
time <- 0  # Start time
N0 <- 8063804 # Start population
popInit <- c(S = 7055804,
E = 5000,
I = 3000,
V = 1000000)     #Initial conditions estimated from the data
values <- c(beta = 0.4,
progression_rate = 1 / 22,
rabies_mortality = 1/ 3.1,
birth_rate = 0.003,
natural_mortality = 1/(1.85*365), # per capita backgroud mortality rate
importation_rate = 0, # total importation rate (infectious dogs)
vaccination_coverage = 0.70, # vac coverage at the end of 100 days campaign
efficacy = 1, # vaccine efficacy (proportion)
carrying_capacity=300000, # carrying capacity
loss_immunity=1/(3*365),
type=1, #1=annual waves, 2=annual coverage, 3=combined
period_waves=100
) # loss of immunity from vaccination over time
times <- seq(0,(365*20),1)  # the model will run for a total of 20 years
ts.seiv <- data.frame(lsoda(
y = popInit,               # Initial conditions for population
times = times,             # Timepoints for evaluation
func = seiv,                   # Function to evaluate
parms = values                # Vector of parameters
))
seiv <- function(times,y,parms){
with(c(as.list(y),parms),{
N <- S + E + I + V
if(type==1){
immunization_rate <- ifelse(times/365-floor(times/365)<0.272 & vaccination_coverage>=0.02,1/period_waves*vaccination_coverage,0.025/365)}
else if(type==2){
immunization_rate <-  ifelse(times/365-floor(times/365)<round(period_waves/365,3) &
vaccination_coverage>=0.12,
1/365*vaccination_coverage,0.025/365)}
else if(type==3){
immunization_rate1 =  ifelse(times/365-floor(times/365)<round(period_waves/365,3) &
vaccination_coverage>=0.02,
1/365*vaccination_coverage,0.025/365)
immunization_rate2 =  ifelse(times/365-floor(times/365)<round(period_waves/365,3) &
vaccination_coverage>=0.02,
1/period_waves*vaccination_coverage,0.025/(365))
immunization <- data.frame(immunization_rate1, immunization_rate2)
immunization$immunization_rate = immunization$immunization_rate1 + immunization$immunization_rate2
immunization_rate <- immunization$immunization_rate}
densityDep=TRUE # indicated that transmission is density-dependent
lambda <-  ifelse(densityDep,beta*I/N0,beta*I/N)
carrying_capacity=9000000 # carrying capacity
dS <- birth_rate*(S+V) - natural_mortality* (1+N/carrying_capacity) * S - immunization_rate * S - lambda * S + loss_immunity * V  # We assume that mortality increases with increasing population size
dE <- lambda * S - natural_mortality* (1+N/carrying_capacity) * E  - progression_rate * E
dI <- importation_rate + progression_rate * E - natural_mortality* (1+N/carrying_capacity) * I - rabies_mortality * I
dV <- immunization_rate * S - natural_mortality* (1+N/carrying_capacity) * V - loss_immunity * V
return(list(c(dS, dE, dI, dV)))
})
}
time <- 0  # Start time
N0 <- 8063804 # Start population
popInit <- c(S = 7055804,
E = 5000,
I = 3000,
V = 1000000)     #Initial conditions estimated from the data
values <- c(beta = 0.4,
progression_rate = 1 / 22,
rabies_mortality = 1/ 3.1,
birth_rate = 0.003,
natural_mortality = 1/(1.85*365), # per capita backgroud mortality rate
importation_rate = 0, # total importation rate (infectious dogs)
vaccination_coverage = 0.70, # vac coverage at the end of 100 days campaign
efficacy = 1, # vaccine efficacy (proportion)
carrying_capacity=300000, # carrying capacity
loss_immunity=1/(3*365),
type=1, #1=annual waves, 2=annual coverage, 3=combined
period_waves=100
) # loss of immunity from vaccination over time
times <- seq(0,(365*20),1)  # the model will run for a total of 20 years
ts.seiv <- data.frame(lsoda(
y = popInit,               # Initial conditions for population
times = times,             # Timepoints for evaluation
func = seiv,                   # Function to evaluate
parms = values                # Vector of parameters
))
library(deSolve)
seiv <- function(times,y,parms){
with(c(as.list(y),parms),{
N <- S + E + I + V
if(type==1){
immunization_rate <- ifelse(times/365-floor(times/365)<0.272 & vaccination_coverage>=0.02,1/period_waves*vaccination_coverage,0.025/365)}
else if(type==2){
immunization_rate <-  ifelse(times/365-floor(times/365)<round(period_waves/365,3) &
vaccination_coverage>=0.12,
1/365*vaccination_coverage,0.025/365)}
else if(type==3){
immunization_rate1 =  ifelse(times/365-floor(times/365)<round(period_waves/365,3) &
vaccination_coverage>=0.02,
1/365*vaccination_coverage,0.025/365)
immunization_rate2 =  ifelse(times/365-floor(times/365)<round(period_waves/365,3) &
vaccination_coverage>=0.02,
1/period_waves*vaccination_coverage,0.025/(365))
immunization <- data.frame(immunization_rate1, immunization_rate2)
immunization$immunization_rate = immunization$immunization_rate1 + immunization$immunization_rate2
immunization_rate <- immunization$immunization_rate}
densityDep=TRUE # indicated that transmission is density-dependent
lambda <-  ifelse(densityDep,beta*I/N0,beta*I/N)
carrying_capacity=9000000 # carrying capacity
dS <- birth_rate*(S+V) - natural_mortality* (1+N/carrying_capacity) * S - immunization_rate * S - lambda * S + loss_immunity * V  # We assume that mortality increases with increasing population size
dE <- lambda * S - natural_mortality* (1+N/carrying_capacity) * E  - progression_rate * E
dI <- importation_rate + progression_rate * E - natural_mortality* (1+N/carrying_capacity) * I - rabies_mortality * I
dV <- immunization_rate * S - natural_mortality* (1+N/carrying_capacity) * V - loss_immunity * V
return(list(c(dS, dE, dI, dV)))
})
}
time <- 0  # Start time
N0 <- 8063804 # Start population
popInit <- c(S = 7055804,
E = 5000,
I = 3000,
V = 1000000)     #Initial conditions estimated from the data
values <- c(beta = 0.4,
progression_rate = 1 / 22,
rabies_mortality = 1/ 3.1,
birth_rate = 0.003,
natural_mortality = 1/(1.85*365), # per capita backgroud mortality rate
importation_rate = 0, # total importation rate (infectious dogs)
vaccination_coverage = 0.70, # vac coverage at the end of 100 days campaign
efficacy = 1, # vaccine efficacy (proportion)
carrying_capacity=300000, # carrying capacity
loss_immunity=1/(3*365),
type=1, #1=annual waves, 2=annual coverage, 3=combined
period_waves=100
) # loss of immunity from vaccination over time
times <- seq(0,(365*20),1)  # the model will run for a total of 20 years
ts.seiv <- data.frame(lsoda(
y = popInit,               # Initial conditions for population
times = times,             # Timepoints for evaluation
func = seiv,                   # Function to evaluate
parms = values                # Vector of parameters
))
ts.seiv$year=ts.seiv$time/365
ts.seiv$calyear=ts.seiv$year+2023
ts.seiv$Ntot <- ts.seiv$S + ts.seiv$E + ts.seiv$I + ts.seiv$V
# convert data to long format for visualization
ts.seiv1 <- ts.seiv %>%
pivot_longer(c(S,E,I,V), names_to="compartments", values_to="values") %>%
mutate(compartments=recode(compartments, "S"="Susceptible", "E"="Exposed", "I"="Infectious", "V"="Vaccinated")) %>%
group_by(calyear) %>%
mutate(Ntot=sum(values)) %>%
ungroup()
ggplot(ts.seiv1[ts.seiv1$compartments%in%"Infectious",], aes(x=calyear, y=values, color=compartments))+ geom_line(size=1)+theme_bw()+geom_vline(xintercept = 2030, linetype=2)+
scale_fill_brewer(palette = "Set1")+labs(x="Year", y="Number of dogs", color="")
ggplot(ts.seiv1, aes(x=calyear, y=Ntot))+ geom_line( color="blue")+theme_bw()+geom_vline(xintercept = 2030, linetype=2)+labs(x="Year",y="Dog population")
# This code creates a loop over different levels of vaccination coverage to estimate:
# (A) The number of infectious dogs over time
# (B) The year of elimination (defined as <1 infectious dog)
changevac = data.frame(Nr=rep(NA,length(times)))
for (i in c(0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0)) {
values["vaccination_coverage"]=i
ts.seiv <- data.frame(lsoda(
y = popInit,               # Initial conditions for population
times = times,             # Timepoints for evaluation
func = seiv,                   # Function to evaluate
parms = values                # Vector of parameters
))
changevac2 <- cbind(changevac, i=ts.seiv$I)
changevac <- changevac2
}
ts.seiv$calyear=ts.seiv$time/365+2023
changevac <- cbind(ts.seiv$calyear,changevac)
names(changevac) = c("calyear", "none",0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0)
changevac1 <- changevac %>%
pivot_longer(c(3:12), names_to="coverage", values_to="proportion") %>%
mutate(coverage=as.numeric(coverage))
ggplot(changevac1[changevac1$coverage>0.6,], aes(x=calyear,y=proportion, color=factor(coverage)))+
labs(x="Year", y="Number of infectious dogs")+
geom_line()+theme_bw()+geom_vline(xintercept = 2030, linetype=2)+scale_fill_brewer(palette="Set1")
ggplot(changevac1, aes(x=calyear,y=proportion, color=factor(coverage)))+
labs(x="Year", y="Number of infectious dogs")+
geom_line()+theme_bw()+geom_vline(xintercept = 2030, linetype=2)+scale_fill_brewer(palette="Set1")
